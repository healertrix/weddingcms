-- Enable UUID extension if not already enabled
create extension if not exists "uuid-ossp";

-- Weddings Table
create table weddings (
  id uuid default gen_random_uuid() primary key,
  couple_names text not null,
  wedding_date date not null,
  location text not null,
  featured_image_key text not null,
  status text not null default 'draft' check (status in ('draft', 'published', 'archived')),
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now()
);

-- Wedding Gallery Images
create table wedding_gallery_images (
  id uuid default gen_random_uuid() primary key,
  wedding_id uuid references weddings(id) on delete cascade,
  image_key text not null,
  order_index int not null,
  alt_text text,
  created_at timestamp with time zone default now(),
  unique(wedding_id, order_index)
);

-- Films Table
create table films (
  id uuid default gen_random_uuid() primary key,
  title text not null,
  couple_names text not null,
  wedding_date date not null,
  location text not null,
  description text,
  video_url text not null,
  status text not null default 'draft' check (status in ('draft', 'published', 'archived')),
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  is_featured_home boolean DEFAULT false
);

-- Blog Posts Table
create table blog_posts (
  id uuid default gen_random_uuid() primary key,
  title text not null,
  slug text not null unique,
  content text not null,
  featured_image_key text,
  status text not null default 'draft' check (status in ('draft', 'published', 'archived')),
  published_at timestamp with time zone,
  created_at timestamp with time zone default now(),
  updated_at timestamp with time zone default now(),
  wedding_date date,
  location text,
  is_featured_home boolean DEFAULT false,
  is_featured_blog boolean DEFAULT false
);

-- Add indexes for the new boolean columns for better performance
CREATE INDEX blog_posts_featured_home_idx ON blog_posts(is_featured_home) WHERE is_featured_home = true;
CREATE INDEX blog_posts_featured_blog_idx ON blog_posts(is_featured_blog) WHERE is_featured_blog = true;

-- Blog Post Images
create table blog_post_images (
  id uuid default gen_random_uuid() primary key,
  blog_post_id uuid references blog_posts(id) on delete cascade,
  image_key text not null,
  order_index int not null,
  alt_text text,
  created_at timestamp with time zone default now(),
  unique(blog_post_id, order_index)
);

-- First drop the existing testimonials table and recreate it
DROP TABLE IF EXISTS testimonials CASCADE;

-- Recreate Testimonials Table with correct constraints
CREATE TABLE testimonials (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  couple_names text NOT NULL,
  wedding_date date NOT NULL,
  location text NOT NULL,
  review text NOT NULL,
  video_url text,
  image_key text,
  status text NOT NULL DEFAULT 'draft' CHECK (status IN ('draft', 'published')),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Create index for testimonials
CREATE INDEX testimonials_status_idx ON testimonials(status);

-- Add trigger for updated_at
CREATE TRIGGER update_testimonials_updated_at
    BEFORE UPDATE ON testimonials
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- Enable RLS
ALTER TABLE testimonials ENABLE ROW LEVEL SECURITY;

-- Create policies for testimonials
CREATE POLICY "Allow public to read published testimonials"
ON testimonials FOR SELECT
TO public
USING (status = 'published');

CREATE POLICY "Allow full access to authenticated users"
ON testimonials FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

CREATE POLICY "Allow anonymous operations"
ON testimonials FOR ALL
TO anon
USING (true)
WITH CHECK (true);

-- Create indexes for performance
create index wedding_gallery_images_wedding_idx on wedding_gallery_images(wedding_id);
create index blog_post_images_post_idx on blog_post_images(blog_post_id);
create index weddings_status_idx on weddings(status);
create index films_status_idx on films(status);
create index blog_posts_status_idx on blog_posts(status);
create index blog_posts_slug_idx on blog_posts(slug);

-- Create trigger function
create or replace function update_updated_at_column()
returns trigger as $$
begin
    new.updated_at = current_timestamp;
    return new;
end;
$$ language plpgsql;

-- Add triggers for each table that has updated_at
create trigger update_weddings_updated_at
    before update on weddings
    for each row
    execute function update_updated_at_column();

create trigger update_films_updated_at
    before update on films
    for each row
    execute function update_updated_at_column();

create trigger update_blog_posts_updated_at
    before update on blog_posts
    for each row
    execute function update_updated_at_column();

-- Add RLS policies
alter table weddings enable row level security;
alter table wedding_gallery_images enable row level security;
alter table films enable row level security;
alter table blog_posts enable row level security;
alter table blog_post_images enable row level security;

-- Create policies for public read access
create policy "Public read access for published weddings"
    on weddings for select
    using (status = 'published');

create policy "Public read access for wedding gallery"
    on wedding_gallery_images for select
    using (exists (
        select 1 from weddings
        where weddings.id = wedding_id
        and weddings.status = 'published'
    ));

create policy "Public read access for published films"
    on films for select
    using (status = 'published');

create policy "Public read access for published blog posts"
    on blog_posts for select
    using (status = 'published');

create policy "Public read access for blog images"
    on blog_post_images for select
    using (exists (
        select 1 from blog_posts
        where blog_posts.id = blog_post_id
        and blog_posts.status = 'published'
    ));

-- Add RLS policies for weddings table
ALTER TABLE weddings ENABLE ROW LEVEL SECURITY;

-- Allow anonymous users to read published weddings
CREATE POLICY "Allow public to read published weddings"
ON weddings FOR SELECT
TO public
USING (status = 'published');

-- Allow anonymous users to perform all operations
CREATE POLICY "Allow anonymous operations on weddings"
ON weddings FOR ALL
TO anon
USING (true)
WITH CHECK (true);

-- Allow authenticated users full access
CREATE POLICY "Allow authenticated users full access to weddings"
ON weddings FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

-- Add similar policies for wedding_gallery_images
ALTER TABLE wedding_gallery_images ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Allow public to read wedding gallery images"
ON wedding_gallery_images FOR SELECT
TO public
USING (EXISTS (
    SELECT 1 FROM weddings
    WHERE weddings.id = wedding_gallery_images.wedding_id
    AND weddings.status = 'published'
));

CREATE POLICY "Allow anonymous operations on wedding gallery images"
ON wedding_gallery_images FOR ALL
TO anon
USING (true)
WITH CHECK (true);

CREATE POLICY "Allow authenticated users full access to wedding gallery images"
ON wedding_gallery_images FOR ALL
TO authenticated
USING (true)
WITH CHECK (true);

-- Blog Post Gallery Images
CREATE TABLE blog_post_gallery_images (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  blog_post_id uuid REFERENCES blog_posts(id) ON DELETE CASCADE,
  image_key text NOT NULL,
  order_index int NOT NULL,
  alt_text text,
  created_at timestamp with time zone DEFAULT now(),
  UNIQUE(blog_post_id, order_index)
);

-- Add index for performance
CREATE INDEX blog_post_gallery_images_post_idx ON blog_post_gallery_images(blog_post_id);

-- Add RLS policy
ALTER TABLE blog_post_gallery_images ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public read access for blog gallery images"
    ON blog_post_gallery_images FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM blog_posts
        WHERE blog_posts.id = blog_post_id
        AND blog_posts.status = 'published'
    ));

-- Add new columns to blog_posts table
ALTER TABLE blog_posts
ADD COLUMN wedding_date date,
ADD COLUMN location text,
ADD COLUMN is_featured_home boolean DEFAULT false,
ADD COLUMN is_featured_blog boolean DEFAULT false;

-- Add indexes for better performance
CREATE INDEX IF NOT EXISTS blog_posts_wedding_date_idx ON blog_posts(wedding_date);
CREATE INDEX IF NOT EXISTS blog_posts_featured_home_idx ON blog_posts(is_featured_home) WHERE is_featured_home = true;
CREATE INDEX IF NOT EXISTS blog_posts_featured_blog_idx ON blog_posts(is_featured_blog) WHERE is_featured_blog = true;

-- Create blog_post_gallery_images table if it doesn't exist
CREATE TABLE IF NOT EXISTS blog_post_gallery_images (
  id uuid DEFAULT gen_random_uuid() PRIMARY KEY,
  blog_post_id uuid REFERENCES blog_posts(id) ON DELETE CASCADE,
  image_key text NOT NULL,
  order_index int NOT NULL,
  alt_text text,
  created_at timestamp with time zone DEFAULT now(),
  UNIQUE(blog_post_id, order_index)
);

-- Add RLS policies for gallery images
ALTER TABLE blog_post_gallery_images ENABLE ROW LEVEL SECURITY;

CREATE POLICY "Public read access for blog gallery images"
    ON blog_post_gallery_images FOR SELECT
    USING (EXISTS (
        SELECT 1 FROM blog_posts
        WHERE blog_posts.id = blog_post_id
        AND blog_posts.status = 'published'
    ));

-- Add index for gallery images
CREATE INDEX IF NOT EXISTS blog_post_gallery_images_post_idx ON blog_post_gallery_images(blog_post_id);

-- Add featured column to films table
ALTER TABLE films
ADD COLUMN is_featured_home boolean DEFAULT false;

-- Add index for better performance
CREATE INDEX films_featured_home_idx ON films(is_featured_home) WHERE is_featured_home = true;

-- Add featured column to weddings table
ALTER TABLE weddings
ADD COLUMN is_featured_home boolean DEFAULT false;

-- Add index for better performance
CREATE INDEX weddings_featured_home_idx ON weddings(is_featured_home) WHERE is_featured_home = true;
